/*This Is crucial In data engineering, we have to check data quality, data integrity and consistency */

SELECT cst_id,COUNT(1) FROM bronze.crm_cust_info 
    GROUP BY CST_ID HAVING COUNT(1) > 1;
    
SELECT * FROM    
    (SELECT P.*, ROW_NUMBER() 
    OVER(PARTITION BY cst_id ORDER BY CST_CREATE_DATE DESC) 
    AS FLAG_LAST
        FROM (SELECT * FROM bronze.crm_cust_info WHERE CST_ID 
        IN
    (SELECT cst_id FROM bronze.crm_cust_info 
        GROUP BY CST_ID )) P)
        WHERE FLAG_LAST = 1;    
--CHECK CST_KEY DUPLICATES 
--EXPECTED NO RESULT

SELECT * FROM bronze.crm_cust_info
    WHERE CST_KEY IN 
    (SELECT cst_KEY FROM bronze.crm_cust_info 
        GROUP BY CST_KEY HAVING COUNT(1) > 1) ; 

SELECT cst_id, COUNT(1) FROM bronze.crm_cust_info 
        GROUP BY CST_ID HAVING COUNT(1) > 1;

--CHECKING FOR FIRSTNAME WITH UNWANTED SPACES
--EXPECTED GOOD RESULT => NO RESULT

SELECT CST_FIRSTNAME FROM BRONZE.crm_cust_info
WHERE CST_FIRSTNAME != TRIM(CST_FIRSTNAME);


SELECT CST_LASTNAME FROM BRONZE.crm_cust_info
WHERE CST_LASTNAME != TRIM(CST_LASTNAME);

           
--QUALITY CHECKING ON SILVER CRM_CUST_INFO            
SELECT * FROM SILVER.CRM_CUST_INFO WHERE CST_FIRSTNAME != TRIM(CST_FIRSTNAME);            
--QUALITY CHECKING ON SILVER CRM_CUST_INFO FOR UNWANTED SPACES         
SELECT * FROM SILVER.CRM_CUST_INFO WHERE CST_FIRSTNAME != TRIM(CST_FIRSTNAME);            

--DATA STANDARDZATION AND DATA CONSISTENCY
SELECT DISTINCT CST_MARITAL_STATUS FROM SILVER.CRM_CUST_INFO;
SELECT DISTINCT CST_GNDR FROM SILVER.CRM_CUST_INFO;

--VIEW  SILVER.CRM_CUST_INFO
SELECT * FROM SILVER.CRM_CUST_INFO;

SELECT PRD_ID,
       PRD_KEY,
       REPLACE(SUBSTR(PRD_KEY, 1, 5), '-', '_') AS CAT_ID,
       REPLACE(SUBSTR(PRD_KEY, 7, LENGTH(PRD_KEY)), '-', '_') AS PRD_KEY,
       prd_nm,
       prd_cost,
       prd_line,
       prd_start_dt,
       LEAD(prd_START_dt) OVER (PARTITION BY PRD_KEY ORDER BY PRD_START_DT)-1 AS prd_end_dt
    FROM 
    BRONZE.CRM_PRD_INFO;
    
--CHECK PRD_NM FOR UNWANTED SPACE
--EXPECTATION NO RESULT
SELECT PRD_NM FROM BRONZE.CRM_PRD_INFO WHERE PRD_NM != TRIM(PRD_NM);
--CHECK PRD_COST QUALITY 
SELECT PRD_COST FROM BRONZE.CRM_PRD_INFO WHERE PRD_COST < 0 OR PRD_COST IS NULL;    

--CHECK STARTDATE AND ENDDATE QUALITY
--EXPECTATION ENDDATE MUST BE GREATER TAHN STARTDATE
SELECT PRD_START_DT, PRD_END_DT FROM BRONZE.CRM_PRD_INFO
WHERE PRD_START_DT > PRD_END_DT;

--CHECK SILVER LAYER QUALITY DATA
--EXPECTATION 0 RESULT
SELECT PRD_ID, COUNT(1) AS COUNTS FROM SILVER.CRM_PRD_INFO 
GROUP BY PRD_ID HAVING COUNT(1) > 1;

SELECT 
    CASE WHEN SLS_SHIP_DT=0 OR LENGTH(SLS_SHIP_DT) !=8 THEN Null
        ELSE TO_DATE(SLS_SHIP_DT, 'YYYY-MM-DD')
    END AS SLS_SHIP_DT
    FROM BRONZE.CRM_SALES_DETAILS;   

--SLS_ORDER_DT=0
SELECT CASE WHEN CID LIKE 'NAS%' THEN SUBSTR(CID, 4, LENGTH(CID))
            ELSE CID
       END CID,
       CASE WHEN BDATE > CURRENT_DATE THEN NULL
            ELSE BDATE
       END BDATE,
       CASE WHEN UPPER(TRIM(GEN)) IN ('F', 'FEMALE') THEN 'Female'
            WHEN UPPER(TRIM(GEN)) IN ('M', 'MALE') THEN 'Male'
            ELSE 'N/A'
       END GEN      
    FROM BRONZE.ERP_CUST_AZ12;
